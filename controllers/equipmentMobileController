const { Equipment, Employee, Desk, Section, Inventaire, InventaireEquipment } = require('../models');
const { Op } = require('sequelize');

// Get all non-deleted equipment with basic info (mobile optimized)
exports.getAllNonDeletedEquipment = async (req, res) => {
  try {
    const equipment = await Equipment.findAll({
      where: { is_deleted: false },
      attributes: ['id', 'name', 'special_identifier', 'state', 'buying_price', 'date_of_purchase', 'current_ammortissement'],
      include: [
        {
          model: Employee,
          as: 'employee',
          attributes: ['id_employee', 'firstName', 'lastName']
        },
        {
          model: Desk,
          as: 'desk',
          attributes: ['id', 'name']
        },
        {
          model: Section,
          as: 'section',
          attributes: ['id', 'name']
        }
      ],
      order: [['name', 'ASC']]
    });

    // Transform data for mobile
    const transformedEquipment = equipment.map(equip => ({
      id: equip.id,
      name: equip.name,
      special_identifier: equip.special_identifier,
      emplacement: equip.desk ? equip.desk.name : (equip.section ? equip.section.name : 'Unknown'),
      associated_user: equip.employee ? `${equip.employee.firstName} ${equip.employee.lastName}` : 'Unassigned',
      status: equip.state,
      buying_price: parseFloat(equip.buying_price) || 0,
      date_of_purchase: equip.date_of_purchase,
      current_ammortissement: parseFloat(equip.current_ammortissement) || 0
    }));
    
    res.json({
      success: true,
      data: transformedEquipment,
      count: transformedEquipment.length
    });
  } catch (err) {
    console.error('Error in getAllNonDeletedEquipment:', err);
    res.status(500).json({ 
      success: false,
      message: 'Failed to fetch equipment',
      error: err.message 
    });
  }
};

// Get equipment by inventory ID
exports.getAllNonDeletedEquipmentByInventoryID = async (req, res) => {
  try {
    const { inventory_id } = req.params;
    
    // Verify inventory exists
    const inventory = await Inventaire.findByPk(inventory_id);
    if (!inventory) {
      return res.status(404).json({
        success: false,
        message: 'Inventory not found'
      });
    }

    // Get equipment associated with this inventory
    const inventoryEquipment = await InventaireEquipment.findAll({
      where: { inventaire_id: inventory_id },
      include: [
        {
          model: Equipment,
          where: { is_deleted: false },
          attributes: ['id', 'name', 'special_identifier', 'state', 'buying_price', 'date_of_purchase', 'current_ammortissement'],
          include: [
            {
              model: Employee,
              as: 'employee',
              attributes: ['id_employee', 'firstName', 'lastName']
            },
            {
              model: Desk,
              as: 'desk',
              attributes: ['id', 'name']
            },
            {
              model: Section,
              as: 'section',
              attributes: ['id', 'name']
            }
          ]
        }
      ]
    });

    const equipment = inventoryEquipment.map(item => item.Equipment);
    
    // Transform data for mobile
    const transformedEquipment = equipment.map(equip => ({
      id: equip.id,
      name: equip.name,
      special_identifier: equip.special_identifier,
      emplacement: equip.desk ? equip.desk.name : (equip.section ? equip.section.name : 'Unknown'),
      associated_user: equip.employee ? `${equip.employee.firstName} ${equip.employee.lastName}` : 'Unassigned',
      status: equip.state,
      buying_price: parseFloat(equip.buying_price) || 0,
      date_of_purchase: equip.date_of_purchase,
      current_ammortissement: parseFloat(equip.current_ammortissement) || 0
    }));

    res.json({
      success: true,
      data: transformedEquipment,
      count: transformedEquipment.length,
      inventory: {
        id: inventory.id,
        name: inventory.name,
        status: inventory.status
      }
    });
  } catch (err) {
    console.error('Error in getAllNonDeletedEquipmentByInventoryID:', err);
    res.status(500).json({ 
      success: false,
      message: 'Failed to fetch equipment for inventory',
      error: err.message 
    });
  }
};

// Get equipment for specific inventory (for Android app)
exports.getInventoryEquipment = async (req, res) => {
  try {
    const { id } = req.params;
    
    // Verify inventory exists
    const inventory = await Inventaire.findByPk(id);
    if (!inventory) {
      return res.status(404).json({
        success: false,
        message: 'Inventory not found'
      });
    }

    // Get all equipment (since we don't have direct inventory-equipment relationship yet)
    // This will return all equipment that should be in this inventory location
    const equipment = await Equipment.findAll({
      where: { 
        is_deleted: false
      },
      attributes: ['id', 'name', 'special_identifier', 'state', 'buying_price', 'date_of_purchase', 'current_ammortissement'],
      include: [
        {
          model: Employee,
          as: 'employee',
          attributes: ['id_employee', 'firstName', 'lastName']
        },
        {
          model: Desk,
          as: 'desk',
          attributes: ['id', 'name']
        },
        {
          model: Section,
          as: 'section',
          attributes: ['id', 'name']
        }
      ]
    });

    // Transform data to match Android EquipmentResponse model
    const equipmentList = equipment.map(equip => {
      // Determine emplacement (location)
      let emplacement = 'Unknown';
      if (equip.desk) {
        emplacement = equip.desk.name;
      } else if (equip.section) {
        emplacement = equip.section.name;
      }
      
      // Determine associated user
      let associated_user = 'Unassigned';
      if (equip.employee) {
        associated_user = `${equip.employee.firstName} ${equip.employee.lastName}`;
      }

      return {
        id: equip.id,
        name: equip.name,
        special_identifier: equip.special_identifier,
        emplacement: emplacement,
        associated_user: associated_user,
        status: equip.state,
        buying_price: parseFloat(equip.buying_price) || 0,
        date_of_purchase: equip.date_of_purchase,
        current_ammortissement: parseFloat(equip.current_ammortissement) || 0
      };
    });

    res.json(equipmentList);
  } catch (err) {
    console.error('Error in getInventoryEquipment:', err);
    res.status(500).json({ 
      success: false,
      message: 'Failed to fetch inventory equipment',
      error: err.message 
    });
  }
};

// Get equipment by ID
exports.getEquipmentById = async (req, res) => {
  try {
    const { id } = req.params;
    const equipment = await Equipment.findOne({
      where: { id, is_deleted: false },
      attributes: ['id', 'name', 'special_identifier', 'state', 'buying_price', 'date_of_purchase', 'current_ammortissement'],
      include: [
        {
          model: Employee,
          as: 'employee',
          attributes: ['id_employee', 'firstName', 'lastName']
        },
        {
          model: Desk,
          as: 'desk',
          attributes: ['id', 'name']
        },
        {
          model: Section,
          as: 'section',
          attributes: ['id', 'name']
        }
      ]
    });
    
    if (!equipment) {
      return res.status(404).json({ 
        success: false,
        message: 'Equipment not found' 
      });
    }

    // Transform data for mobile
    const transformedEquipment = {
      id: equipment.id,
      name: equipment.name,
      special_identifier: equipment.special_identifier,
      emplacement: equipment.desk ? equipment.desk.name : (equipment.section ? equipment.section.name : 'Unknown'),
      associated_user: equipment.employee ? `${equipment.employee.firstName} ${equipment.employee.lastName}` : 'Unassigned',
      status: equipment.state,
      buying_price: parseFloat(equipment.buying_price) || 0,
      date_of_purchase: equipment.date_of_purchase,
      current_ammortissement: parseFloat(equipment.current_ammortissement) || 0
    };
    
    res.json({ 
      success: true,
      data: transformedEquipment 
    });
  } catch (err) {
    console.error('Error in getEquipmentById:', err);
    res.status(500).json({ 
      success: false,
      message: 'Failed to fetch equipment',
      error: err.message 
    });
  }
};

// Create equipment (mobile optimized - simplified)
exports.createEquipment = async (req, res) => {
  try {
    const required = ['name', 'special_identifier', 'buying_price', 'date_of_purchase', 'state'];
    const missing = required.filter(attr => !req.body[attr]);
    if (missing.length > 0) {
      return res.status(400).json({ 
        success: false,
        message: `Missing required fields: ${missing.join(', ')}` 
      });
    }

    const { name, special_identifier, buying_price, date_of_purchase, current_ammortissement, state, employee_id, desk_id, section_id } = req.body;

    // Validate desk_id or section_id
    if ((!desk_id && !section_id) || (desk_id && section_id)) {
      return res.status(400).json({ 
        success: false,
        message: 'Equipment must be assigned to either a desk or a section, but not both' 
      });
    }

    // Check if special identifier already exists
    const existingEquipment = await Equipment.findOne({ 
      where: { special_identifier, is_deleted: false } 
    });
    if (existingEquipment) {
      return res.status(400).json({
        success: false,
        message: 'Equipment with this special identifier already exists'
      });
    }

    // Validate references if provided
    if (employee_id) {
      const employee = await Employee.findByPk(employee_id);
      if (!employee) {
        return res.status(400).json({ 
          success: false,
          message: 'The specified employee does not exist' 
        });
      }
    }

    if (desk_id) {
      const desk = await Desk.findByPk(desk_id);
      if (!desk) {
        return res.status(400).json({ 
          success: false,
          message: 'The specified desk does not exist' 
        });
      }
    }

    if (section_id) {
      const section = await Section.findByPk(section_id);
      if (!section) {
        return res.status(400).json({ 
          success: false,
          message: 'The specified section does not exist' 
        });
      }
    }

    const equipment = await Equipment.create({
      name,
      special_identifier,
      buying_price,
      date_of_purchase,
      current_ammortissement: current_ammortissement || 0,
      state,
      employee_id,
      desk_id,
      section_id
    });

    // Fetch created equipment with associations
    const createdEquipment = await Equipment.findByPk(equipment.id, {
      include: [
        {
          model: Employee,
          as: 'employee',
          attributes: ['id_employee', 'firstName', 'lastName']
        },
        {
          model: Desk,
          as: 'desk',
          attributes: ['id', 'name']
        },
        {
          model: Section,
          as: 'section',
          attributes: ['id', 'name']
        }
      ]
    });

    // Transform response for mobile
    const transformedEquipment = {
      id: createdEquipment.id,
      name: createdEquipment.name,
      special_identifier: createdEquipment.special_identifier,
      emplacement: createdEquipment.desk ? createdEquipment.desk.name : (createdEquipment.section ? createdEquipment.section.name : 'Unknown'),
      associated_user: createdEquipment.employee ? `${createdEquipment.employee.firstName} ${createdEquipment.employee.lastName}` : 'Unassigned',
      status: createdEquipment.state,
      buying_price: parseFloat(createdEquipment.buying_price) || 0,
      date_of_purchase: createdEquipment.date_of_purchase,
      current_ammortissement: parseFloat(createdEquipment.current_ammortissement) || 0
    };

    res.status(201).json({ 
      success: true,
      message: 'Equipment created successfully', 
      data: transformedEquipment 
    });
  } catch (err) {
    console.error('Error in createEquipment:', err);
    res.status(500).json({ 
      success: false,
      message: 'Failed to create equipment',
      error: err.message 
    });
  }
};

// Update equipment (full update)
exports.updateEquipment = async (req, res) => {
  try {
    const { id } = req.params;
    const equipment = await Equipment.findOne({ 
      where: { id, is_deleted: false } 
    });
    
    if (!equipment) {
      return res.status(404).json({ 
        success: false,
        message: 'Equipment not found' 
      });
    }

    const { name, special_identifier, buying_price, date_of_purchase, current_ammortissement, state, employee_id, desk_id, section_id } = req.body;

    // Validate desk_id or section_id if provided
    if ((desk_id !== undefined && section_id !== undefined) && 
        ((!desk_id && !section_id) || (desk_id && section_id))) {
      return res.status(400).json({ 
        success: false,
        message: 'Equipment must be assigned to either a desk or a section, but not both' 
      });
    }

    // Check if special identifier already exists (excluding current equipment)
    if (special_identifier && special_identifier !== equipment.special_identifier) {
      const existingEquipment = await Equipment.findOne({ 
        where: { special_identifier, is_deleted: false, id: { [Op.ne]: id } } 
      });
      if (existingEquipment) {
        return res.status(400).json({
          success: false,
          message: 'Another equipment with this special identifier already exists'
        });
      }
    }

    // Validate references if provided
    if (employee_id !== undefined) {
      if (employee_id) {
        const employee = await Employee.findByPk(employee_id);
        if (!employee) {
          return res.status(400).json({ 
            success: false,
            message: 'The specified employee does not exist' 
          });
        }
      }
    }

    if (desk_id !== undefined) {
      if (desk_id) {
        const desk = await Desk.findByPk(desk_id);
        if (!desk) {
          return res.status(400).json({ 
            success: false,
            message: 'The specified desk does not exist' 
          });
        }
      }
    }

    if (section_id !== undefined) {
      if (section_id) {
        const section = await Section.findByPk(section_id);
        if (!section) {
          return res.status(400).json({ 
            success: false,
            message: 'The specified section does not exist' 
          });
        }
      }
    }

    await equipment.update({
      name: name || equipment.name,
      special_identifier: special_identifier || equipment.special_identifier,
      buying_price: buying_price || equipment.buying_price,
      date_of_purchase: date_of_purchase || equipment.date_of_purchase,
      current_ammortissement: current_ammortissement !== undefined ? current_ammortissement : equipment.current_ammortissement,
      state: state || equipment.state,
      employee_id: employee_id !== undefined ? employee_id : equipment.employee_id,
      desk_id: desk_id !== undefined ? desk_id : equipment.desk_id,
      section_id: section_id !== undefined ? section_id : equipment.section_id
    });

    // Fetch updated equipment with associations
    const updatedEquipment = await Equipment.findByPk(id, {
      include: [
        {
          model: Employee,
          as: 'employee',
          attributes: ['id_employee', 'firstName', 'lastName']
        },
        {
          model: Desk,
          as: 'desk',
          attributes: ['id', 'name']
        },
        {
          model: Section,
          as: 'section',
          attributes: ['id', 'name']
        }
      ]
    });

    // Transform response for mobile
    const transformedEquipment = {
      id: updatedEquipment.id,
      name: updatedEquipment.name,
      special_identifier: updatedEquipment.special_identifier,
      emplacement: updatedEquipment.desk ? updatedEquipment.desk.name : (updatedEquipment.section ? updatedEquipment.section.name : 'Unknown'),
      associated_user: updatedEquipment.employee ? `${updatedEquipment.employee.firstName} ${updatedEquipment.employee.lastName}` : 'Unassigned',
      status: updatedEquipment.state,
      buying_price: parseFloat(updatedEquipment.buying_price) || 0,
      date_of_purchase: updatedEquipment.date_of_purchase,
      current_ammortissement: parseFloat(updatedEquipment.current_ammortissement) || 0
    };

    res.json({ 
      success: true,
      message: 'Equipment updated successfully', 
      data: transformedEquipment 
    });
  } catch (err) {
    console.error('Error in updateEquipment:', err);
    res.status(500).json({ 
      success: false,
      message: 'Failed to update equipment',
      error: err.message 
    });
  }
};

// Patch equipment status (partial update for state)
exports.patchEquipmentStatusById = async (req, res) => {
  try {
    const { id } = req.params;
    const { state } = req.body;

    if (!state) {
      return res.status(400).json({ 
        success: false,
        message: 'State is required' 
      });
    }

    // Validate state value
    const validStates = ['new', 'good', 'fair', 'poor', 'broken'];
    if (!validStates.includes(state)) {
      return res.status(400).json({ 
        success: false,
        message: `Invalid state. Must be one of: ${validStates.join(', ')}` 
      });
    }

    const equipment = await Equipment.findOne({ 
      where: { id, is_deleted: false } 
    });
    
    if (!equipment) {
      return res.status(404).json({ 
        success: false,
        message: 'Equipment not found' 
      });
    }

    await equipment.update({ state });

    res.json({ 
      success: true,
      message: 'Equipment status updated successfully',
      data: {
        id: equipment.id,
        name: equipment.name,
        special_identifier: equipment.special_identifier,
        previous_state: equipment._previousDataValues.state,
        new_state: state
      }
    });
  } catch (err) {
    console.error('Error in patchEquipmentStatusById:', err);
    res.status(500).json({ 
      success: false,
      message: 'Failed to update equipment status',
      error: err.message 
    });
  }
};

// Soft delete equipment
exports.deleteEquipment = async (req, res) => {
  try {
    const { id } = req.params;
    const equipment = await Equipment.findOne({ 
      where: { id, is_deleted: false } 
    });
    
    if (!equipment) {
      return res.status(404).json({ 
        success: false,
        message: 'Equipment not found or already deleted' 
      });
    }

    await equipment.update({
      is_deleted: true,
      deleted_at: new Date()
    });

    res.json({ 
      success: true,
      message: 'Equipment deleted successfully' 
    });
  } catch (err) {
    console.error('Error in deleteEquipment:', err);
    res.status(500).json({ 
      success: false,
      message: 'Failed to delete equipment',
      error: err.message 
    });
  }
};

// Get equipment by special identifier (for RFID scanning)
exports.getEquipmentBySpecialIdentifier = async (req, res) => {
  try {
    const { special_identifier } = req.params;
    const equipment = await Equipment.findOne({
      where: { special_identifier, is_deleted: false },
      attributes: ['id', 'name', 'special_identifier', 'state', 'buying_price', 'date_of_purchase', 'current_ammortissement'],
      include: [
        {
          model: Employee,
          as: 'employee',
          attributes: ['id_employee', 'firstName', 'lastName', 'CIN']
        },
        {
          model: Desk,
          as: 'desk',
          attributes: ['id', 'name']
        },
        {
          model: Section,
          as: 'section',
          attributes: ['id', 'name']
        }
      ]
    });
    
    if (!equipment) {
      return res.status(404).json({ 
        success: false,
        message: 'No equipment found with this special identifier' 
      });
    }

    // Transform data for mobile
    const transformedEquipment = {
      id: equipment.id,
      name: equipment.name,
      special_identifier: equipment.special_identifier,
      emplacement: equipment.desk ? equipment.desk.name : (equipment.section ? equipment.section.name : 'Unknown'),
      associated_user: equipment.employee ? `${equipment.employee.firstName} ${equipment.employee.lastName}` : 'Unassigned',
      status: equipment.state,
      buying_price: parseFloat(equipment.buying_price) || 0,
      date_of_purchase: equipment.date_of_purchase,
      current_ammortissement: parseFloat(equipment.current_ammortissement) || 0
    };
    
    res.json({ 
      success: true,
      data: transformedEquipment 
    });
  } catch (err) {
    console.error('Error in getEquipmentBySpecialIdentifier:', err);
    res.status(500).json({ 
      success: false,
      message: 'Failed to fetch equipment',
      error: err.message 
    });
  }
};

// Quick search equipment (for mobile search functionality)
exports.searchEquipment = async (req, res) => {
  try {
    const { q } = req.query;
    
    if (!q || q.length < 2) {
      return res.status(400).json({ 
        success: false,
        message: 'Search query must be at least 2 characters long' 
      });
    }

    const equipment = await Equipment.findAll({
      where: {
        is_deleted: false,
        [Op.or]: [
          { name: { [Op.like]: `%${q}%` } },
          { special_identifier: { [Op.like]: `%${q}%` } }
        ]
      },
      attributes: ['id', 'name', 'special_identifier', 'state'],
      include: [
        {
          model: Employee,
          as: 'employee',
          attributes: ['id_employee', 'firstName', 'lastName']
        }
      ],
      limit: 50
    });

    res.json({
      success: true,
      data: equipment,
      count: equipment.length
    });
  } catch (err) {
    console.error('Error in searchEquipment:', err);
    res.status(500).json({ 
      success: false,
      message: 'Search failed',
      error: err.message 
    });
  }
};